<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MatrixContainerTemplate.tt. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable
namespace Nima;

<#
var typeNames = new string[] {
    "Byte", "Int16", "Int32", "Int64", "Single", "Double"
};
#>
<# foreach (var typeName in typeNames) {#>
public /*sealed*/ class <#= typeName #>MatrixContainer : MatrixContainerBase
{
    public <#= typeName #>MatrixContainer(int rows, int columns, bool initialize = true)
        : base(rows, columns, Unsafe.SizeOf<<#= typeName #>>(), initialize)
    { }

    public <#= typeName #>MatrixContainer(int rows, int columns, IEnumerable<<#= typeName #>> items)
        : this(rows, columns, false)
    {
        int length = rows * columns;
        int row = 0;
        int column = int.MaxValue;
        var span = Span<<#= typeName #>>.Empty;

#if NET6_0_OR_GREATER
        if (items.TryGetNonEnumeratedCount(out var count))
        {
            if (length < count)
            {
                throw new IndexOutOfRangeException("Items is large.");
            }
            else if (length > count)
            {
                throw new ArgumentException("Items is small.", nameof(items));
            }

            foreach (var item in items)
            {
                if (column >= columns)
                {
                    column = 0;
                    span = Matrix.AsRowSpan<<#= typeName #>>(row++);
                }
                span[column++] = item;
            }
        }
        else
#endif
        {
            int written = 0;
            foreach (var item in items)
            {
                if (column >= columns)
                {
                    column = 0;
                    span = Matrix.AsRowSpan<<#= typeName #>>(row++);
                }
                span[column++] = item;

                if (++written > length)
                    throw new IndexOutOfRangeException("Items is large.");
            }

            if (!(row == rows && column == columns))
                throw new ArgumentException("Items is small.", nameof(items));
        }
    }

    public <#= typeName #>MatrixContainer(int rows, int columns, ReadOnlySpan<<#= typeName #>> items)
        : this(rows, columns, false)
    {
        if (rows * columns != items.Length)
            throw new ArgumentException("Items is different length.", nameof(items));

        int row = 0;
        int column = int.MaxValue;
        var span = Span<<#= typeName #>>.Empty;

        foreach (var item in items)
        {
            if (column >= columns)
            {
                column = 0;
                span = Matrix.AsRowSpan<<#= typeName #>>(row++);
            }
            span[column++] = item;
        }
    }
}

<# } #>
