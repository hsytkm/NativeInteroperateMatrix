<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY Matrix.SourceGenerator. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

<# if (!string.IsNullOrEmpty(Namespace)) { #>
namespace <#= Namespace #>
<# } #>
{
    [StructLayout(LayoutKind.Sequential, Pack = 1, Size = 8 + (4 * 4))]
    readonly partial record struct <#= MatrixClassName #> : IMatrix<<#= ValueItemTypeName #>>
    {
        private readonly IntPtr _pointer;
        //private readonly int _allocSize;  // = rows * stride;
        private readonly int _rows;         // height
        private readonly int _columns;      // width
        private readonly int _bytesPerItem;
        private readonly int _stride;

        public <#= MatrixClassName #>(IntPtr intPtr, int rows, int columns, int bytesPerItem, int stride)
        {
            if (IntPtr.Size != 8)
                throw new NotSupportedException();

            if (bytesPerItem != Unsafe.SizeOf<<#= ValueItemTypeName #>>())
                throw new ArgumentException(nameof(bytesPerItem));

            _pointer = intPtr;
            _rows = rows;
            _columns = columns;
            _bytesPerItem = bytesPerItem;
            _stride = stride;
        }

        // IMatrix<T>
        public IntPtr Pointer => _pointer;
        public int Rows => _rows;
        public int Columns => _columns;
        public int BytesPerItem => _bytesPerItem;
        public int BitsPerItem => _bytesPerItem * 8;
        public int Stride => _stride;
        public int AllocatedSize => _columns * _bytesPerItem * _rows;  // don't use stride
        public bool IsContinuous => (_columns * _bytesPerItem) == _stride;
        public bool IsValid
        {
            get
            {
                if (_pointer == IntPtr.Zero) return false;
                if (_columns <= 0 || _rows <= 0) return false;
                if (_stride < _columns * _bytesPerItem) return false;
                if (AllocatedSize < _columns * _bytesPerItem * _rows) return false;
                return true;    //valid
            }
        }

        public unsafe Span<<#= ValueItemTypeName #>> AsSpan()
        {
            var size = _rows * _stride;
            return new Span<<#= ValueItemTypeName #>>(_pointer.ToPointer(), size);
        }

        public unsafe Span<<#= ValueItemTypeName #>> AsRowSpan(int row)
        {
            if (row < 0 || _rows - 1 < row)
                throw new ArgumentException("Invalid row");

            var ptr = _pointer + (row * _stride);
            return new Span<<#= ValueItemTypeName #>>(ptr.ToPointer(), _columns);
        }

        private IntPtr GetIntPtr(int row, int column)
        {
            if (row < 0 || _rows - 1 < row || column < 0 || _columns - 1 < column)
                throw new ArgumentException("Out of range.");

            return _pointer + (row * _stride) + (column * _bytesPerItem);
        }
                
        public <#= ValueItemTypeName #> ReadValue(int row, int column)
        {
            if (row < 0 || _rows - 1 < row || column < 0 || _columns - 1 < column)
                throw new ArgumentException("Out of range.");

            return UnsafeUtils.ReadStructureFromPtr<<#= ValueItemTypeName #>>(GetIntPtr(row, column));
        }

        public void WriteValue(int row, int column, in <#= ValueItemTypeName #> value)
        {
            if (row < 0 || _rows - 1 < row || column < 0 || _columns - 1 < column)
                throw new ArgumentException("Out of range.");

            UnsafeUtils.WriteStructureToPtr(GetIntPtr(row, column), value);
        }

        public override string ToString() => $"Rows={_rows}, Cols={_columns}, Pointer=0x{_pointer:x16}";
    }

    public sealed partial class <#= ContainerClassName #> : MatrixContainerBase<<#= MatrixClassName #>, <#= ValueItemTypeName #>>
    {
        public <#= ContainerClassName #>(int rows, int columns, bool initialize = true)
            : base(rows, columns, initialize)
        { }

        public <#= ContainerClassName #>(int rows, int columns, IEnumerable<<#= ValueItemTypeName #>> items)
            : base(rows, columns, false)
        {
            var length = rows * columns;
            var written = 0;
            var row = 0;
            var column = 0;
            var span = Matrix.AsRowSpan(row);

            foreach (var item in items)
            {
                if (column >= columns)
                {
                    column = 0;
                    row++;
                    span = Matrix.AsRowSpan(row);
                }
                span[column++] = item;

                if (++written > length)
                    throw new ArgumentException("items is large.", nameof(items));
            }

            if (!(row == rows - 1 && column == columns))
                throw new ArgumentException("items is small.", nameof(items));
        }

        protected override <#= MatrixClassName #> CreateMatrix(IntPtr intPtr, int width, int height, int bytesPerData, int stride)
        {
            return new <#= MatrixClassName #>(intPtr, width, height, bytesPerData, stride);
        }
    }
}
