<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY ArrayContainerTemplate.tt. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable
namespace Nima;

<#
var typeNames = new string[] {
    "Byte", "Int16", "Int32", "Int64", "Single", "Double"
};
#>
<# foreach (var typeName in typeNames) {#>
public interface I<#= typeName #>ArrayContainer : INativeArrayContainer
{
    <#= typeName #>[] ToArray();
}

public /*sealed*/ class <#= typeName #>ArrayContainer : ArrayContainerBase, I<#= typeName #>ArrayContainer
{
    public <#= typeName #>ArrayContainer(int length, bool initialize = true)
        : base(length, Unsafe.SizeOf<<#= typeName #>>(), initialize)
    { }

    public <#= typeName #>ArrayContainer(int length, IEnumerable<<#= typeName #>> items)
        : this(length, false)
    {
        int index = 0;
        var span = Array.AsSpan<<#= typeName #>>();

#if NET6_0_OR_GREATER
        if (items.TryGetNonEnumeratedCount(out var count))
        {
            if (length < count)
            {
                throw new IndexOutOfRangeException("Items is large.");
            }
            else if (length > count)
            {
                throw new ArgumentException("Items is small.", nameof(items));
            }

            foreach (var item in items)
                span[index++] = item;
        }
        else
#endif
        {
            foreach (var item in items)
                span[index++] = item;

            if (index != length)
                throw new ArgumentException("Items is small.", nameof(items));
        }
    }
    
    public <#= typeName #>ArrayContainer(int length, ReadOnlySpan<<#= typeName #>> items)
        : this(length, false)
    {
        if (length != items.Length)
            throw new ArgumentException("Items is different length.", nameof(items));

        int index = 0;
        var span = Array.AsSpan<<#= typeName #>>();

        foreach (var item in items)
            span[index++] = item;
    }

    public <#= typeName #>[] ToArray()
    {
        using var token = GetArrayForReading(out NativeArray array);
        return array.AsSpan<<#= typeName #>>().ToArray();
    }
}


<# } #>
