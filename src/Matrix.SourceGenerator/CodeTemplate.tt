<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY Matrix.SourceGenerator. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable
using System;
using System.Runtime.InteropServices;

<# if (!string.IsNullOrEmpty(Namespace)) { #>
namespace <#= Namespace #>
<# } #>
{
    [StructLayout(LayoutKind.Sequential, Pack = 1, Size = 8 + (4 * 4))]
    readonly partial struct <#= MatrixClassName #> : IMatrix<<#= ValueItemTypeName #>>, IEquatable<<#= MatrixClassName #>>
    {
        private readonly IntPtr _pointer;
        //private readonly int _allocSize;  // = rows * stride;
        private readonly int _rows;         // height
        private readonly int _columns;      // width
        private readonly int _bytesPerItem;
        private readonly int _stride;

        public <#= MatrixClassName #>(IntPtr intPtr, int rows, int columns, int bytesPerItem, int stride)
        {
            if (IntPtr.Size != 8)
                throw new NotSupportedException();

            if (bytesPerItem != Marshal.SizeOf<<#= ValueItemTypeName #>>())
                throw new ArgumentException(nameof(bytesPerItem));

            _pointer = intPtr;
            _rows = rows;
            _columns = columns;
            _bytesPerItem = bytesPerItem;
            _stride = stride;
        }

        // IMatrix<T>
        public IntPtr Pointer => _pointer;
        public int Rows => _rows;
        public int Columns => _columns;
        public int BytesPerItem => _bytesPerItem;
        public int BitsPerItem => _bytesPerItem * 8;
        public int Stride => _stride;
        public int Width => _columns;
        public int Height => _rows;
        public int AllocatedSize => _columns * _bytesPerItem * _rows;  // don't use stride
        public bool IsContinuous => (_columns * _bytesPerItem) == _stride;
        public bool IsValid
        {
            get
            {
                if (_pointer == IntPtr.Zero) return false;
                if (_columns <= 0 || _rows <= 0) return false;
                if (_stride < _columns * _bytesPerItem) return false;
                if (AllocatedSize < _columns * _bytesPerItem * _rows) return false;
                return true;    //valid
            }
        }
        public bool IsInvalid => !IsValid;

        public unsafe Span<<#= ValueItemTypeName #>> GetRowSpan(int row)
        {
            if (row < 0 || _rows - 1 < row)
                throw new ArgumentException("Invalid row");

            var ptr = _pointer + (row * _stride);
            return new Span<<#= ValueItemTypeName #>>(ptr.ToPointer(), _columns);
        }
        public ReadOnlySpan<<#= ValueItemTypeName #>> GetRoRowSpan(int row) => GetRowSpan(row);

        public IntPtr GetIntPtr(int row, int column)
        {
            if (row < 0 || _rows - 1 < row || column < 0 || _columns - 1 < column)
                throw new ArgumentException("Out of range.");

            return _pointer + (row * _stride) + (column * _bytesPerItem);
        }
                
        public <#= ValueItemTypeName #> ReadValue(int row, int column)
        {
            if (row < 0 || _rows - 1 < row || column < 0 || _columns - 1 < column)
                throw new ArgumentException("Out of range.");

            return UnsafeHelper.ReadStructureFromPtr<<#= ValueItemTypeName #>>(GetIntPtr(row, column));
        }

        public void WriteValue(in <#= ValueItemTypeName #> value, int row, int column)
        {
            if (row < 0 || _rows - 1 < row || column < 0 || _columns - 1 < column)
                throw new ArgumentException("Out of range.");

            UnsafeHelper.WriteStructureToPtr(GetIntPtr(row, column), value);
        }

        // IEquatable<T>
        public bool Equals(<#= MatrixClassName #> other) => this == other;
        public override bool Equals(object? obj) => (obj is <#= MatrixClassName #> other) && Equals(other);
        public override int GetHashCode() => HashCode.Combine(_pointer, _rows, _columns, _bytesPerItem, _stride);
        public static bool operator ==(in <#= MatrixClassName #> left, in <#= MatrixClassName #> right)
             => (left._pointer, left._rows, left._columns, left._bytesPerItem, left._stride)
                == (right._pointer, right._rows, right._columns, right._bytesPerItem, right._stride);
        public static bool operator !=(in <#= MatrixClassName #> left, in <#= MatrixClassName #> right) => !(left == right);

        public override string ToString() => $"Rows={_rows}, Cols={_columns}, Pointer=0x{_pointer:x16}";

    }

    public class <#= ContainerClassName #> : MatrixContainerBase<<#= MatrixClassName #>, <#= ValueItemTypeName #>>
    {
        public <#= ContainerClassName #>(int rows, int columns, bool initialize = true)
            : base(rows, columns, initialize)
        { }

        public static <#= ContainerClassName #> Create(ValueArray2d<<#= ValueItemTypeName #>> array2d)
        {
            var container = new <#= ContainerClassName #>(array2d.Rows, array2d.Columns, false);
            var matrix = container.Matrix;

            for (var r = 0; r < matrix.Rows; r++)
            {
                var line = matrix.GetRowSpan(r);
                for (var c = 0; c < line.Length; c++)
                {
                    line[c] = array2d[r, c];
                }
            }
            return container;
        }
    }
}
